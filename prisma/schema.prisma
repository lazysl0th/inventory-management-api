generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int         @id @default(autoincrement())
  name               String
  email              String      @unique
  password           String?
  googleId           String?     @unique
  facebookId         String?     @unique
  roles              UserRole[]
  status             Status      @default(Active)
  createdAt          DateTime    @default(now())
  ownedInventories   Inventory[] @relation("UserOwnedInventories")
  ownedItems         Item[]      @relation("UserOwnedItems")
  allowedInventories Inventory[] @relation("UserAllowedInventories")
  comments           Comment[]
  likes              Like[]

  @@index([email])
}

model Role {
  id    Int        @id @default(autoincrement())
  name  RoleName   @unique
  users UserRole[]
}

model UserRole {
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId Int
  role   Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

enum RoleName {
  User
  Admin
}

enum Status {
  Active
  Blocked
}

model Inventory {
  id             Int              @id @default(autoincrement())
  title          String
  description    String?
  category       Category
  tags           Tag[]            @relation("InventoryTags")
  image          String?
  ownerId        Int
  owner          User             @relation("UserOwnedInventories", fields: [ownerId], references: [id])
  isPublic       Boolean          @default(false)
  allowedUsers   User[]           @relation("UserAllowedInventories")
  customIdFormat Json
  version        Int              @default(1)
  fields         InventoryField[]
  items          Item[]
  comments       Comment[]
  itemsCount     Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  searchVector Unsupported("tsvector")?

  @@index([searchVector], type: Gin)
}

model InventoryField {
  id          Int         @id @default(autoincrement())
  inventoryId Int
  inventory   Inventory   @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  title       String
  type        FieldType
  description String?
  showInTable Boolean     @default(true)
  isDeleted   Boolean     @default(false)
  order       Int
  itemValues  ItemValue[] @relation("InventoryFieldToItemValue")

  @@unique([inventoryId, title])
}

enum FieldType {
  TEXT
  LONGTEXT
  NUMBER
  FILE
  BOOLEAN
}

enum Category {
  Equipment
  Furniture
  Book
  Other
}

model Item {
  id          Int         @id @default(autoincrement())
  inventoryId Int
  inventory   Inventory   @relation(fields: [inventoryId], references: [id])
  customId    String
  ownerId     Int
  owner       User        @relation("UserOwnedItems", fields: [ownerId], references: [id])
  values      ItemValue[]
  likes       Like[]
  version     Int         @default(1)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  comments    Comment[]

  @@unique([inventoryId, customId])
}

model ItemValue {
  id      Int            @id @default(autoincrement())
  itemId  Int
  item    Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)
  fieldId Int
  field   InventoryField @relation("InventoryFieldToItemValue", fields: [fieldId], references: [id], onDelete: Cascade)
  value   String
}

model Comment {
  id          Int        @id @default(autoincrement())
  content     String
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  inventoryId Int?
  inventory   Inventory? @relation(fields: [inventoryId], references: [id])
  itemId      Int?
  item        Item?      @relation(fields: [itemId], references: [id])
  createdAt   DateTime   @default(now())
}

model Like {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])
  itemId Int
  item   Item @relation(fields: [itemId], references: [id])

  @@unique([userId, itemId])
}

model Tag {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  inventories Inventory[] @relation("InventoryTags")
}
